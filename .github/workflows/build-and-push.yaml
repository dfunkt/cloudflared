name: Build Docker Image

on:
  push:
    branches: master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    env:
      PLATFORMS: "['linux/amd64', 'linux/amd64/v3', 'linux/arm64']"

    outputs:
      platforms: ${{ steps.extract-binaries.outputs.PLTF }}
      source-version: ${{ steps.extract-binaries.outputs.SOURCE_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure build platforms
        shell: bash
        run: |
          PLATFORMS=$(echo "${{ env.PLATFORMS }}" | tr -d "[' ]")
          echo "BUILD_PLATFORMS=$PLATFORMS" | tee -a "${GITHUB_ENV}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=local,dest=/tmp/${{ github.event.repository.name }}

      - name: Attest container image
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Check for extracted binaries
        id: extract-binaries
        run: |
          for dir in /tmp/${{ github.event.repository.name }}/*/usr/local/bin/; do
            dirname="$(dirname $dir | awk -F "/" '{print $4}')"
            mv "${dir}${{ github.event.repository.name }}" "${dir}${{ github.event.repository.name }}-${dirname}"
          done

          PLATFORMS=$(echo "${{ env.PLATFORMS }}" | tr '/' '_')
          echo "PLTF=$PLATFORMS" | tee -a "$GITHUB_OUTPUT"

          echo "SOURCE_VERSION=$(git rev-parse --short HEAD)" | tee -a "${GITHUB_OUTPUT}"

      - name: Attest artifacts
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: /tmp/${{ github.event.repository.name }}/*/usr/local/bin/

      - name: Binary cache between jobs
        uses: actions/cache/save@v4
        with:
          path: /tmp/${{ github.event.repository.name }}
          key: ${{ github.event.repository.name }}-binaries-${{ steps.extract-binaries.outputs.SOURCE_VERSION }}

  upload-binaries:
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        platforms: ${{ fromJSON(needs.build-and-push.outputs.platforms) }}

    steps:
      - name: Binary cache between jobs
        uses: actions/cache/restore@v4
        with:
          path: /tmp/${{ github.event.repository.name }}
          key: ${{ github.event.repository.name }}-binaries-${{ needs.build-and-push.outputs.source-version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ needs.build-and-push.outputs.source-version }}-${{ matrix.platforms }}
          path: /tmp/${{ github.event.repository.name }}/${{ matrix.platforms }}/usr/local/bin/
