name: Build Docker Image

on:
  push:
    branches: main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ${{ matrix.arch.os }}

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    strategy:
      matrix:
        arch:
          - os: ubuntu-24.04
            platform: linux/amd64
            short: amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            short: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.arch.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=registry,compression=zstd,force-compression=true

      - name: Attest container image
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Extract binaries from container
        run: |
          # Create output directory
          mkdir -p ./binaries

          # Create a temporary container and copy binaries
          CONTAINER_ID=$(docker create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest@${{ steps.build.outputs.digest }})

          # Copy your binary (adjust the path to match your binary location in the container)
          docker cp $CONTAINER_ID:/usr/local/bin/${{ github.event.repository.name }} ./binaries/cloudflared-${{ matrix.arch.short }}

          # Clean up
          docker rm $CONTAINER_ID

      - name: Attest binaries
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: ./binaries/${{ github.event.repository.name }}-${{ matrix.arch.short }}

      - name: Get short SHA for artefacts
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ steps.vars.outputs.sha_short }}-linux-${{ matrix.arch.short }}
          path: ./binaries/*-${{ matrix.arch.short }}

  deploy:
    name: Deploy
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    needs: build-and-push

    env:
      HAVE_WEBHOOK_ENABLED: ${{ secrets.WEBHOOK_URL != '' }}

    steps:
      - name: Invoke deployment hook
        uses: distributhor/workflow-webhook@2381f0e9c7b6bf061fb1405bd0804b8706116369 # v3.0.8
        if: ${{ env.HAVE_WEBHOOK_ENABLED == 'true' }}
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
